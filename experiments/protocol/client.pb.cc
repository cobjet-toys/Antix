// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Client {

namespace {

const ::google::protobuf::Descriptor* RobotMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RobotMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RobotMessage_NeighborRobots_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RobotMessage_NeighborRobots_reflection_ = NULL;
const ::google::protobuf::Descriptor* RobotMessage_NeighborPucks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RobotMessage_NeighborPucks_reflection_ = NULL;
const ::google::protobuf::Descriptor* Client_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Client_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2eproto() {
  protobuf_AddDesc_client_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.proto");
  GOOGLE_CHECK(file != NULL);
  RobotMessage_descriptor_ = file->message_type(0);
  static const int RobotMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotMessage, neighbors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotMessage, pucks_),
  };
  RobotMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RobotMessage_descriptor_,
      RobotMessage::default_instance_,
      RobotMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RobotMessage));
  RobotMessage_NeighborRobots_descriptor_ = RobotMessage_descriptor_->nested_type(0);
  static const int RobotMessage_NeighborRobots_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotMessage_NeighborRobots, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotMessage_NeighborRobots, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotMessage_NeighborRobots, speed_),
  };
  RobotMessage_NeighborRobots_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RobotMessage_NeighborRobots_descriptor_,
      RobotMessage_NeighborRobots::default_instance_,
      RobotMessage_NeighborRobots_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotMessage_NeighborRobots, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotMessage_NeighborRobots, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RobotMessage_NeighborRobots));
  RobotMessage_NeighborPucks_descriptor_ = RobotMessage_descriptor_->nested_type(1);
  static const int RobotMessage_NeighborPucks_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotMessage_NeighborPucks, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotMessage_NeighborPucks, isheld_),
  };
  RobotMessage_NeighborPucks_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RobotMessage_NeighborPucks_descriptor_,
      RobotMessage_NeighborPucks::default_instance_,
      RobotMessage_NeighborPucks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotMessage_NeighborPucks, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotMessage_NeighborPucks, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RobotMessage_NeighborPucks));
  Client_descriptor_ = file->message_type(1);
  static const int Client_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client, message_),
  };
  Client_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Client_descriptor_,
      Client::default_instance_,
      Client_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Client));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RobotMessage_descriptor_, &RobotMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RobotMessage_NeighborRobots_descriptor_, &RobotMessage_NeighborRobots::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RobotMessage_NeighborPucks_descriptor_, &RobotMessage_NeighborPucks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Client_descriptor_, &Client::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2eproto() {
  delete RobotMessage::default_instance_;
  delete RobotMessage_reflection_;
  delete RobotMessage_NeighborRobots::default_instance_;
  delete RobotMessage_NeighborRobots_reflection_;
  delete RobotMessage_NeighborPucks::default_instance_;
  delete RobotMessage_NeighborPucks_reflection_;
  delete Client::default_instance_;
  delete Client_reflection_;
}

void protobuf_AddDesc_client_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014client.proto\022\006Client\"\353\001\n\014RobotMessage\022"
    "6\n\tneighbors\030\001 \003(\0132#.Client.RobotMessage"
    ".NeighborRobots\0221\n\005pucks\030\002 \003(\0132\".Client."
    "RobotMessage.NeighborPucks\032=\n\016NeighborRo"
    "bots\022\n\n\002id\030\001 \002(\005\022\020\n\010position\030\002 \002(\002\022\r\n\005sp"
    "eed\030\003 \001(\002\0321\n\rNeighborPucks\022\020\n\010position\030\001"
    " \002(\002\022\016\n\006isHeld\030\002 \001(\010\"/\n\006Client\022%\n\007messag"
    "e\030\001 \003(\0132\024.Client.RobotMessage", 309);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.proto", &protobuf_RegisterTypes);
  RobotMessage::default_instance_ = new RobotMessage();
  RobotMessage_NeighborRobots::default_instance_ = new RobotMessage_NeighborRobots();
  RobotMessage_NeighborPucks::default_instance_ = new RobotMessage_NeighborPucks();
  Client::default_instance_ = new Client();
  RobotMessage::default_instance_->InitAsDefaultInstance();
  RobotMessage_NeighborRobots::default_instance_->InitAsDefaultInstance();
  RobotMessage_NeighborPucks::default_instance_->InitAsDefaultInstance();
  Client::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2eproto {
  StaticDescriptorInitializer_client_2eproto() {
    protobuf_AddDesc_client_2eproto();
  }
} static_descriptor_initializer_client_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RobotMessage_NeighborRobots::kIdFieldNumber;
const int RobotMessage_NeighborRobots::kPositionFieldNumber;
const int RobotMessage_NeighborRobots::kSpeedFieldNumber;
#endif  // !_MSC_VER

RobotMessage_NeighborRobots::RobotMessage_NeighborRobots()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RobotMessage_NeighborRobots::InitAsDefaultInstance() {
}

RobotMessage_NeighborRobots::RobotMessage_NeighborRobots(const RobotMessage_NeighborRobots& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RobotMessage_NeighborRobots::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  position_ = 0;
  speed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RobotMessage_NeighborRobots::~RobotMessage_NeighborRobots() {
  SharedDtor();
}

void RobotMessage_NeighborRobots::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RobotMessage_NeighborRobots::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RobotMessage_NeighborRobots::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RobotMessage_NeighborRobots_descriptor_;
}

const RobotMessage_NeighborRobots& RobotMessage_NeighborRobots::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();  return *default_instance_;
}

RobotMessage_NeighborRobots* RobotMessage_NeighborRobots::default_instance_ = NULL;

RobotMessage_NeighborRobots* RobotMessage_NeighborRobots::New() const {
  return new RobotMessage_NeighborRobots;
}

void RobotMessage_NeighborRobots::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    position_ = 0;
    speed_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RobotMessage_NeighborRobots::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_position;
        break;
      }
      
      // required float position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_speed;
        break;
      }
      
      // optional float speed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RobotMessage_NeighborRobots::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required float position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->position(), output);
  }
  
  // optional float speed = 3;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->speed(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RobotMessage_NeighborRobots::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required float position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->position(), target);
  }
  
  // optional float speed = 3;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->speed(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RobotMessage_NeighborRobots::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required float position = 2;
    if (has_position()) {
      total_size += 1 + 4;
    }
    
    // optional float speed = 3;
    if (has_speed()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobotMessage_NeighborRobots::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RobotMessage_NeighborRobots* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RobotMessage_NeighborRobots*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RobotMessage_NeighborRobots::MergeFrom(const RobotMessage_NeighborRobots& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RobotMessage_NeighborRobots::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotMessage_NeighborRobots::CopyFrom(const RobotMessage_NeighborRobots& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotMessage_NeighborRobots::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void RobotMessage_NeighborRobots::Swap(RobotMessage_NeighborRobots* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(position_, other->position_);
    std::swap(speed_, other->speed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RobotMessage_NeighborRobots::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RobotMessage_NeighborRobots_descriptor_;
  metadata.reflection = RobotMessage_NeighborRobots_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RobotMessage_NeighborPucks::kPositionFieldNumber;
const int RobotMessage_NeighborPucks::kIsHeldFieldNumber;
#endif  // !_MSC_VER

RobotMessage_NeighborPucks::RobotMessage_NeighborPucks()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RobotMessage_NeighborPucks::InitAsDefaultInstance() {
}

RobotMessage_NeighborPucks::RobotMessage_NeighborPucks(const RobotMessage_NeighborPucks& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RobotMessage_NeighborPucks::SharedCtor() {
  _cached_size_ = 0;
  position_ = 0;
  isheld_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RobotMessage_NeighborPucks::~RobotMessage_NeighborPucks() {
  SharedDtor();
}

void RobotMessage_NeighborPucks::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RobotMessage_NeighborPucks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RobotMessage_NeighborPucks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RobotMessage_NeighborPucks_descriptor_;
}

const RobotMessage_NeighborPucks& RobotMessage_NeighborPucks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();  return *default_instance_;
}

RobotMessage_NeighborPucks* RobotMessage_NeighborPucks::default_instance_ = NULL;

RobotMessage_NeighborPucks* RobotMessage_NeighborPucks::New() const {
  return new RobotMessage_NeighborPucks;
}

void RobotMessage_NeighborPucks::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    position_ = 0;
    isheld_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RobotMessage_NeighborPucks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isHeld;
        break;
      }
      
      // optional bool isHeld = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isHeld:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isheld_)));
          set_has_isheld();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RobotMessage_NeighborPucks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->position(), output);
  }
  
  // optional bool isHeld = 2;
  if (has_isheld()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isheld(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RobotMessage_NeighborPucks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->position(), target);
  }
  
  // optional bool isHeld = 2;
  if (has_isheld()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isheld(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RobotMessage_NeighborPucks::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float position = 1;
    if (has_position()) {
      total_size += 1 + 4;
    }
    
    // optional bool isHeld = 2;
    if (has_isheld()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobotMessage_NeighborPucks::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RobotMessage_NeighborPucks* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RobotMessage_NeighborPucks*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RobotMessage_NeighborPucks::MergeFrom(const RobotMessage_NeighborPucks& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_isheld()) {
      set_isheld(from.isheld());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RobotMessage_NeighborPucks::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotMessage_NeighborPucks::CopyFrom(const RobotMessage_NeighborPucks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotMessage_NeighborPucks::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RobotMessage_NeighborPucks::Swap(RobotMessage_NeighborPucks* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(isheld_, other->isheld_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RobotMessage_NeighborPucks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RobotMessage_NeighborPucks_descriptor_;
  metadata.reflection = RobotMessage_NeighborPucks_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RobotMessage::kNeighborsFieldNumber;
const int RobotMessage::kPucksFieldNumber;
#endif  // !_MSC_VER

RobotMessage::RobotMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RobotMessage::InitAsDefaultInstance() {
}

RobotMessage::RobotMessage(const RobotMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RobotMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RobotMessage::~RobotMessage() {
  SharedDtor();
}

void RobotMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RobotMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RobotMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RobotMessage_descriptor_;
}

const RobotMessage& RobotMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();  return *default_instance_;
}

RobotMessage* RobotMessage::default_instance_ = NULL;

RobotMessage* RobotMessage::New() const {
  return new RobotMessage;
}

void RobotMessage::Clear() {
  neighbors_.Clear();
  pucks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RobotMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Client.RobotMessage.NeighborRobots neighbors = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_neighbors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_neighbors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_neighbors;
        if (input->ExpectTag(18)) goto parse_pucks;
        break;
      }
      
      // repeated .Client.RobotMessage.NeighborPucks pucks = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pucks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pucks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pucks;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RobotMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Client.RobotMessage.NeighborRobots neighbors = 1;
  for (int i = 0; i < this->neighbors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->neighbors(i), output);
  }
  
  // repeated .Client.RobotMessage.NeighborPucks pucks = 2;
  for (int i = 0; i < this->pucks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pucks(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RobotMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Client.RobotMessage.NeighborRobots neighbors = 1;
  for (int i = 0; i < this->neighbors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->neighbors(i), target);
  }
  
  // repeated .Client.RobotMessage.NeighborPucks pucks = 2;
  for (int i = 0; i < this->pucks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pucks(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RobotMessage::ByteSize() const {
  int total_size = 0;
  
  // repeated .Client.RobotMessage.NeighborRobots neighbors = 1;
  total_size += 1 * this->neighbors_size();
  for (int i = 0; i < this->neighbors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->neighbors(i));
  }
  
  // repeated .Client.RobotMessage.NeighborPucks pucks = 2;
  total_size += 1 * this->pucks_size();
  for (int i = 0; i < this->pucks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pucks(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobotMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RobotMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RobotMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RobotMessage::MergeFrom(const RobotMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  neighbors_.MergeFrom(from.neighbors_);
  pucks_.MergeFrom(from.pucks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RobotMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotMessage::CopyFrom(const RobotMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotMessage::IsInitialized() const {
  
  for (int i = 0; i < neighbors_size(); i++) {
    if (!this->neighbors(i).IsInitialized()) return false;
  }
  for (int i = 0; i < pucks_size(); i++) {
    if (!this->pucks(i).IsInitialized()) return false;
  }
  return true;
}

void RobotMessage::Swap(RobotMessage* other) {
  if (other != this) {
    neighbors_.Swap(&other->neighbors_);
    pucks_.Swap(&other->pucks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RobotMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RobotMessage_descriptor_;
  metadata.reflection = RobotMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Client::kMessageFieldNumber;
#endif  // !_MSC_VER

Client::Client()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Client::InitAsDefaultInstance() {
}

Client::Client(const Client& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Client::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Client::~Client() {
  SharedDtor();
}

void Client::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Client::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Client::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Client_descriptor_;
}

const Client& Client::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();  return *default_instance_;
}

Client* Client::default_instance_ = NULL;

Client* Client::New() const {
  return new Client;
}

void Client::Clear() {
  message_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Client::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Client.RobotMessage message = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_message;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Client::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Client.RobotMessage message = 1;
  for (int i = 0; i < this->message_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->message(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Client::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Client.RobotMessage message = 1;
  for (int i = 0; i < this->message_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->message(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Client::ByteSize() const {
  int total_size = 0;
  
  // repeated .Client.RobotMessage message = 1;
  total_size += 1 * this->message_size();
  for (int i = 0; i < this->message_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->message(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Client::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Client* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Client*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Client::MergeFrom(const Client& from) {
  GOOGLE_CHECK_NE(&from, this);
  message_.MergeFrom(from.message_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Client::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Client::CopyFrom(const Client& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Client::IsInitialized() const {
  
  for (int i = 0; i < message_size(); i++) {
    if (!this->message(i).IsInitialized()) return false;
  }
  return true;
}

void Client::Swap(Client* other) {
  if (other != this) {
    message_.Swap(&other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Client::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Client_descriptor_;
  metadata.reflection = Client_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Client

// @@protoc_insertion_point(global_scope)
